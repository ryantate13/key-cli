// Code generated by "enumer -type command -text"; DO NOT EDIT.

package main

import (
	"fmt"
	"strings"
)

const _commandName = "getsetrmlsenv"

var _commandIndex = [...]uint8{0, 3, 6, 8, 10, 13}

const _commandLowerName = "getsetrmlsenv"

func (i command) String() string {
	if i < 0 || i >= command(len(_commandIndex)-1) {
		return fmt.Sprintf("command(%d)", i)
	}
	return _commandName[_commandIndex[i]:_commandIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _commandNoOp() {
	var x [1]struct{}
	_ = x[get-(0)]
	_ = x[set-(1)]
	_ = x[rm-(2)]
	_ = x[ls-(3)]
	_ = x[env-(4)]
}

var _commandValues = []command{get, set, rm, ls, env}

var _commandNameToValueMap = map[string]command{
	_commandName[0:3]:        get,
	_commandLowerName[0:3]:   get,
	_commandName[3:6]:        set,
	_commandLowerName[3:6]:   set,
	_commandName[6:8]:        rm,
	_commandLowerName[6:8]:   rm,
	_commandName[8:10]:       ls,
	_commandLowerName[8:10]:  ls,
	_commandName[10:13]:      env,
	_commandLowerName[10:13]: env,
}

var _commandNames = []string{
	_commandName[0:3],
	_commandName[3:6],
	_commandName[6:8],
	_commandName[8:10],
	_commandName[10:13],
}

// commandString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func commandString(s string) (command, error) {
	if val, ok := _commandNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _commandNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to command values", s)
}

// commandValues returns all values of the enum
func commandValues() []command {
	return _commandValues
}

// commandStrings returns a slice of all String values of the enum
func commandStrings() []string {
	strs := make([]string, len(_commandNames))
	copy(strs, _commandNames)
	return strs
}

// IsAcommand returns "true" if the value is listed in the enum definition. "false" otherwise
func (i command) IsAcommand() bool {
	for _, v := range _commandValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for command
func (i command) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for command
func (i *command) UnmarshalText(text []byte) error {
	var err error
	*i, err = commandString(string(text))
	return err
}
